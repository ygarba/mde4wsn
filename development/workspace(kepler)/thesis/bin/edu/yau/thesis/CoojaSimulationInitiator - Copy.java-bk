package edu.yau.thesis;

import static edu.yau.thesis.Constants.*;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class CoojaSimulationInitiator /*extends Thread*/ {
	
	int exitVal;
	
	//public void run(){
	public int DoSimulation() {
		
		String execCmd = "";
		final String appPath = System.getenv("WSN_HOME"); 
		final String cygwinPath = System.getenv("CYGWIN32_HOME");
		String m2tPath = appPath + "/contiki-2.7/phd/m2t";
		m2tPath = m2tPath.replace("\\", "/");
				
		OsCheck.OSType ostype=OsCheck.getOperatingSystemType();
		if (ostype == OsCheck.OSType.Windows) {					
			/*
			 * calling the cygwin bash with the Windows style slash "\\" and the bash shell goes with the unix style slash "/"
			 */
			execCmd = cygwinPath + "\\bin\\bash --login -i -c " + m2tPath + "/simRun_nogui_win.sh";		
			//execCmd = "c:/cygwin32" + "/bin/bash --login -i -c " + m2tPath + "/simRun_nogui_win.sh";
		} else if (ostype == OsCheck.OSType.Linux) {		
			execCmd = "bash " + m2tPath + "/simRun_nogui_linux.sh";
		}
		
		System.out.println("Executing: " + execCmd);
		
        try {
        	
        	Runtime runTime = Runtime.getRuntime();
			Process process = runTime.exec(execCmd);
			InputStream inputStream = process.getInputStream();
			InputStreamReader isr = new InputStreamReader(inputStream);
			InputStream errorStream = process.getErrorStream();
			InputStreamReader esr = new InputStreamReader(errorStream);
			//InputStreamReader isr = new InputStreamReader(process.getInputStream());	
			//BufferedReader br = new BufferedReader (isr);	 
			
			int n1;
			char[] c1 = new char[1024];
			StringBuffer standardOutput = new StringBuffer();
			while ((n1 = isr.read(c1)) > 0) {
				//standardOutput.append(c1, 0, n1);	//out of heap memory if uncommented
				//System.out.println("sim...");
			}
			//System.out.println("Standard Output: " + standardOutput.toString());

			int n2;
			char[] c2 = new char[1024];
			StringBuffer standardError = new StringBuffer();
			while ((n2 = esr.read(c2)) > 0) {
				//standardError.append(c2, 0, n2);	//out of heap memory if uncommented
			}
			//System.out.println("Standard Error: " + standardError.toString());
			
			/*exit val of zero is success, any nonzero value indicates an error on Windows. 
			* Eg value of 2 means "file not found"
			* Process.exitValue() -> non blocking
			* Process.waitFor() -> blocking
			*/
			exitVal = process.waitFor();
			System.out.println("Process exit value for cooja simulation -> " + exitVal);	//ToDo: line to be commented
    			
    	}
        catch (IOException ioe){
    		System.err.println(ioe);
    		ioe.printStackTrace();
    		System.out.println("Yau: Got an IOException: " + ioe.getMessage());
    	}
        catch (OutOfMemoryError memEx) {
        	memEx.printStackTrace();
    		System.out.println("Yau: Got out of memory error: " + memEx.getMessage());
        }
        catch (Throwable t) {
    		t.printStackTrace();
    		System.out.println("Yau: Got some other exeception: " + t.getMessage());
    	}
		return exitVal;
	    }
}
